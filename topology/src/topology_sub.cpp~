#include<math.h> 
#include <topology/topology.h>
#include "std_msgs/String.h"
#include <sstream>
#include <frontier_exploration/frontier_search.h>
#include <tf/transform_listener.h>
#include <costmap_2d/costmap_2d.h>
#include <costmap_2d/costmap_2d_ros.h>
#include <costmap_2d/cost_values.h>
#include <frontier_exploration/costmap_tools.h>
#include <geometry_msgs/Point.h>
#include <boost/foreach.hpp>
#include <visualization_msgs/Marker.h>
#include <topology/topology_msg.h>
#include <frontier_exploration/costmap_tools.h>
#include <nav_msgs/Odometry.h>
// Map subscribing
#include <nav_msgs/OccupancyGrid.h>
#include <map_msgs/OccupancyGridUpdate.h>
#include <topology/top.h>
#include <topology/laser_nav_srv.h>
namespace topology{

using costmap_2d::LETHAL_OBSTACLE;
using costmap_2d::NO_INFORMATION;
using costmap_2d::FREE_SPACE;	

class Topo
{
public:
    Topo();
	
	
private:
    ros::NodeHandle nt;
    ros::Subscriber map_sub;
    ros::Subscriber goal_sub;
	ros::Subscriber final_goal_sub;
	ros::Subscriber current_pose_sub;

	ros::Publisher  top_pub;
	ros::Publisher  top_c_pub;
	ros::Publisher  top_goal_pub;

	ros::ServiceServer service;
	topology_msg    top_map;
	std::queue<geometry_msgs::Point> laser_goal;
	tf::TransformListener listener;
	geometry_msgs::PointStamped current_point_odom;
	geometry_msgs::PointStamped current_point_map;
	geometry_msgs::PoseStamped  Next_goal;

	boost::mutex current_point_odom_lock;
	boost::mutex laser_points_lock;
	boost::mutex map_lock;
	nav_msgs::OccupancyGrid map;
	int index;
	bool set_top;
	bool initial_goal;
	int Threshold_value;
	double pi;
	double r;
    
	void get_map(const nav_msgs::OccupancyGrid &map_);
    void laser_goal_callback(const visualization_msgs::Marker &Mpoints);
    bool set_topology(top::Request &req,top::Response &res);
	void top_update(const nav_msgs::OccupancyGrid &map_);
	void current_pose_sub_callback(const nav_msgs::Odometry &C_pose);
	void top_point_remove(int i);
	void Marker_initialize(int id,const nav_msgs::OccupancyGrid &map,unsigned char color,visualization_msgs::Marker &marker);
	void marker_top_pub(std::vector<geometry_msgs::Point> vector,visualization_msgs::Marker marker);
	void marker_top_c_pub(std::vector<geometry_msgs::Point> vector,visualization_msgs::Marker marker);
	int Traverse(int index,const nav_msgs::OccupancyGrid &map_);
	int Max_value_num(std::vector<int> value);
	std::vector<unsigned int> map_nhood4(unsigned int idx,const nav_msgs::OccupancyGrid &map);
};
Topo::Topo():
listener(ros::Duration(10.0))
{
	index=0;
	set_top=false;
	pi=3.141592654;
	r=1.5;
	Threshold_value=999;
	initial_goal = true;
	map_sub = nt.subscribe("map", 1, &Topo::get_map,this);
	goal_sub = nt.subscribe("laser_goal",10,&Topo::laser_goal_callback,this);
	current_pose_sub = nt.subscribe("odom",1,&Topo::current_pose_sub_callback,this);
	top_pub = nt.advertise<visualization_msgs::Marker>("top_map",200); 
	top_c_pub = nt.advertise<visualization_msgs::Marker>("top_c_map",200);  
	top_goal_pub = nt.advertise<geometry_msgs::PoseStamped>("top_goal_pose", 1);
	service = nt.advertiseService("set_top_point",&Topo::set_topology,this);
}

void Topo::top_update(const nav_msgs::OccupancyGrid &map_)
{
	boost::mutex::scoped_lock lock(current_point_odom_lock);
	try
	{
		listener.transformPoint(map_.header.frame_id, current_point_odom, current_point_map);
    }
    catch (tf::TransformException &ex) 
    {
        ROS_ERROR("%s",ex.what());
       	ros::Duration(1.0).sleep();
    }
	if (map_.header.frame_id != current_point_map.header.frame_id)
	{
		ROS_ERROR("The header of current_point_map is %s , expected %s. ",
				current_point_map.header.frame_id.c_str(),
				map_.header.frame_id.c_str());
		return;
	}
	//将起始点加入到第一个拓扑点
	if(initial_goal)
	{top_map.p.push_back(current_point_map.point);initial_goal = false;}
	
	if(!top_map.p_cand.empty())
	{
		for(int i=0;i<top_map.p_cand.size();i++)
		{
			//double l = sqrt(pow(current_point_map.point.x,2)+pow(top_map.p_cand.at(i).x,2));
			//if(l<=2*r)
			//{
				int index = (int)(top_map.p_cand.at(i).x-map_.info.origin.position.x)/map_.info.resolution+(int)
			              (top_map.p_cand.at(i).y-map_.info.origin.position.y)/map_.info.resolution*map_.info.width;
				top_map.gain.at(i) = Traverse(index,map_);
				ROS_INFO("p_cand'gain:%d",top_map.gain.at(i));
				if(top_map.gain.at(i) <= Threshold_value)
				{
					top_point_remove(i);
				}
			//}
		}
	}
	
}

int Topo::Traverse(int index,const nav_msgs::OccupancyGrid &map)
{
	int n=0;
	int value=0;
	unsigned int size_x_ , size_y_;
	double resolution=map.info.resolution;//获取代价地图的分辨率
	int num_max=int(pi*r*r/resolution/resolution);//计算每个候选点的扫描范围内所需遍历的栅格数
	
	size_x_ = map.info.width;
	size_y_ = map.info.height;
	std::vector<bool> visited_flag(size_x_ * size_y_, false);

	//initialize breadth first search
	std::queue<unsigned int> bfs;
	
	//ROS_INFO("idx:%d",idx);
	bfs.push(index);
	while (!bfs.empty()&&n<num_max)
	{
		int idx = bfs.front();
		bfs.pop();
		BOOST_FOREACH(unsigned int nbr, map_nhood4(idx, map))
		{
			//ROS_INFO("%d",map[nbr]);
			if(map.data[nbr]<=0&&!visited_flag[nbr])
			{
				visited_flag[nbr] = true;
				bfs.push(nbr);
				n++;
				if(map.data[nbr]==-1)
				{
					value++;
				}
			}
		}
	}
	return value;
}

std::vector<unsigned int> Topo::map_nhood4(unsigned int idx,const nav_msgs::OccupancyGrid &map)
{
	std::vector<unsigned int> out;

    unsigned int size_x_ = map.info.width, size_y_ = map.info.height;

    if (idx > size_x_ * size_y_ -1)
	{
        ROS_WARN("Evaluating nhood for offmap point");
        return out;
    }

    if(idx % size_x_ > 0)            {out.push_back(idx - 1);}
    if(idx % size_x_ < size_x_ - 1)  {out.push_back(idx + 1);}
    if(idx >= size_x_)               {out.push_back(idx - size_x_);}
    if(idx < size_x_*(size_y_-1))    {out.push_back(idx + size_x_);}
    return out;
}

void Topo::laser_goal_callback(const visualization_msgs::Marker &Mpoints)//获取激光点的map下的坐标const nav_msgs::OccupancyGrid &map
{
	ROS_INFO("get laser points");
	for(int i=0;i<Mpoints.points.size();i++)
	{
		laser_goal.push(Mpoints.points.at(i));
	}
	set_top = true;
	ROS_INFO("top start");
}


bool Topo::set_topology(top::Request &req,top::Response &res)
{
	laser_nav_srv top_srv;
	ros::ServiceClient top_nav = 
                   nt.serviceClient<laser_nav_srv>("select_laser_nav_goal");
	top_srv.request.base_frame_id = "base_link";
    top_srv.request.map_frame_id = map.header.frame_id;
	if(top_nav.call(top_srv))
    {
        ROS_INFO("Got next goal collection from laser_navigation");
                
        //ROS_WARN("X:%f Y:%f",goal_pose.pose.position.x,goal_pose.pose.position.y);
		geometry_msgs::Point m;
        for(int i=0;i<top_srv.response.x_map.size();++i)
        {
            m.x = top_srv.response.x_map.at(i);
            m.y = top_srv.response.y_map.at(i);
			laser_goal.push(m);
        }
    }
    else
    {
        ROS_ERROR("Call to service %s failed", top_nav.getService().c_str() );
    }
	boost::mutex::scoped_lock lock(map_lock);
		ROS_INFO("\n/************************ top start **************************/");
		set_top = false;
		visualization_msgs::Marker top_marker;
		visualization_msgs::Marker top_c_marker;
		
		//设置Marker
		Marker_initialize(1,map,'r',top_marker);//红
		Marker_initialize(0,map,'b',top_c_marker);//蓝
		/************************/
		double resolution=map.info.resolution; 
		ROS_INFO("num_max:%d",int(pi*r*r/resolution/resolution));
		top_update(map);
		
		while(!laser_goal.empty())      //扫描栅格得到每个候选点的增益值
		{   
			//计算各候选目标点map下的index,添加候选top节点
			geometry_msgs::Point p = laser_goal.front();
			laser_goal.pop();
			unsigned int idx=(int)(p.x-map.info.origin.position.x)/resolution+(int)
			              (p.y-map.info.origin.position.y)/resolution*map.info.width;
			
			int value = Traverse(idx,map);			  
			if(value >= Threshold_value)      //如果该增益值高于候选top阈值，把该点加入到top_map的候选top队列
			{
				//top_map.index_c.push_back(idx);
				top_map.gain.push_back(value);
				top_map.p_cand.push_back(p);
				ROS_INFO("top_map cost value: %d > %d,push it into top_map's candidate queue",value,Threshold_value);
			}
			else
			{
				ROS_INFO("top_map cost value: %d < %d,abandoned",value,Threshold_value);
			}
			
		}
		int MaxValueIndex = 0;
		if(!top_map.gain.empty())
		{
			MaxValueIndex = Max_value_num(top_map.gain);//获取当前候选节点中增益值最大的候选目标点
			ROS_INFO("Next_goal value: %d ",top_map.gain.at(MaxValueIndex));
		}
		else
		{
			ROS_ERROR("There are no candidate point");
			return false;
		}
		
		/***********发布目标点**************/
		Next_goal.header.frame_id = map.header.frame_id;
		Next_goal.pose.position = top_map.p_cand.at(MaxValueIndex);
		//boost::mutex::scoped_lock lock(current_point_odom_lock);
		double dx = top_map.p_cand.at(MaxValueIndex).x - current_point_map.point.x;
		double dy = top_map.p_cand.at(MaxValueIndex).y - current_point_map.point.y;
		double theta = atan2(dy,dx);
		Next_goal.pose.orientation.x = 0.0;
		Next_goal.pose.orientation.y = 0.0;
		Next_goal.pose.orientation.z = sin(theta/2);
		Next_goal.pose.orientation.w = cos(theta/2);
		top_goal_pub.publish(Next_goal);
		res.Next_goal = Next_goal;

		/***********添加top点**************/
		top_map.p.push_back(top_map.p_cand.at(MaxValueIndex));//将当前增益值最大的候选目标点纳入top图
		//top_map.index.push_back(top_map.index_c.at(MaxValueIndex));//将增益值最大的候选目标点对应的map序列号从top_map.index_c复制到top_map.index下
		
		/***********移除增益值最大的候选top点**************/
		top_point_remove(MaxValueIndex);

		/*****   发布top图到RVIZ  ***********/
		marker_top_pub(top_map.p,top_marker);
		marker_top_c_pub(top_map.p_cand,top_c_marker);
	//}
		return true;
	
	
}

void Topo::get_map(const nav_msgs::OccupancyGrid &map_)
{
	ros::Rate r(1);
	boost::mutex::scoped_lock lock(map_lock);
	map.header.frame_id = map_.header.frame_id;
	map.info  = map_.info;
	map.data.resize(map_.data.size());
	for(int i=0;i<map_.data.size();i++)
	{
		map.data.at(i)=map_.data.at(i);
	}
	//&map = &map_;
	r.sleep();
}

void Topo::current_pose_sub_callback(const nav_msgs::Odometry &C_pose)
{
	boost::mutex::scoped_lock lock(current_point_odom_lock);
	//ROS_INFO("get current_point_odom");
	current_point_odom.header = C_pose.header;
	//ROS_INFO("current_point_odom.header.frame_id:%s",current_point_odom.header.frame_id.c_str());
	current_point_odom.point = C_pose.pose.pose.position;
	//ROS_INFO("%lf %lf",current_point_odom.point.x,current_point_odom.point.y);
}

int Topo::Max_value_num(std::vector<int> value)
{
	int size=value.size();
	int a=value[0];
	int index=0;
	for(int i=1;i<size;i++)
	{
		if(value[i]>a)
		{
			a=value[i];
			index=i;
		}
	}
	return index;
}

void Topo::top_point_remove(int i)
{
	//top_map.index_c.erase(top_map.index_c.begin()+i);//移动之后，移除该序列号
	top_map.gain.erase(top_map.gain.begin()+i);//移除对应的增益值
	top_map.p_cand.erase(top_map.p_cand.begin()+i);//移除对应的候选top点坐标
}

void Topo::Marker_initialize(int id,const nav_msgs::OccupancyGrid &map,unsigned char color,visualization_msgs::Marker &marker)
{
	marker.header.frame_id = map.header.frame_id;
	ROS_INFO("marker.header.frame_id:%s",marker.header.frame_id.c_str());
	marker.header.stamp = ros::Time(0);
	marker.ns="topology_sub";
	marker.id=id;
	marker.type = visualization_msgs::Marker::POINTS;
	marker.action = visualization_msgs::Marker::ADD;
	marker.pose.orientation.w=1.0;
	marker.scale.x = 0.2;  
	marker.scale.y = 0.2;
	marker.scale.z = 0;

	switch (color)
	{
		case 'r':	
			marker.color.g=0.0;
			marker.color.a=1.0;
			marker.color.r = 1.0;
			marker.color.b = 0.0;
			break;
		case 'b':
			marker.color.g=0.0;
			marker.color.a=1.0;
			marker.color.r = 0.0;
			marker.color.b = 1.0;
			break;
		case 'g':
			marker.color.g=1.0;
			marker.color.a=1.0;
			marker.color.r = 0.0;
			marker.color.b = 0.0;
			break;
	}	
}

void Topo::marker_top_pub(std::vector<geometry_msgs::Point> vector,visualization_msgs::Marker marker)
{
	marker.points.clear();
	for(int i=0;i<vector.size();i++)
	{
		marker.points.push_back(vector.at(i));
	}
	top_pub.publish(marker);
}
void Topo::marker_top_c_pub(std::vector<geometry_msgs::Point> vector,visualization_msgs::Marker marker)
{
	for(int i=0;i<vector.size();i++)
	{
		marker.points.push_back(vector.at(i));
	}
	top_c_pub.publish(marker);
}


}

int main(int argc, char *argv[])
{
	ros::init(argc, argv, "topology_sub");
	topology::Topo top;
	ROS_INFO("start");
	ros::spin();

	return 0;
}


